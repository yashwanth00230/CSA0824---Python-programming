import cmath

def solve_quadratic(a, b, c):
    """
    Solve the quadratic equation of the form: ax^2 + bx + c = 0.

    Arguments:
    a, b, c -- Coefficients of the quadratic equation.

    Returns:
    solutions -- Tuple containing the solutions of the quadratic equation.
    """
    # Calculate the discriminant
    discriminant = (b ** 2) - (4 * a * c)

    # Check if the discriminant is positive, zero, or negative to determine the nature of roots
    if discriminant > 0:
        root1 = (-b + cmath.sqrt(discriminant)) / (2 * a)
        root2 = (-b - cmath.sqrt(discriminant)) / (2 * a)
        solutions = (root1, root2)
    elif discriminant == 0:
        root = -b / (2 * a)
        solutions = (root,)
    else:
        real_part = -b / (2 * a)
        imaginary_part = cmath.sqrt(abs(discriminant)) / (2 * a)
        root1 = complex(real_part, imaginary_part)
        root2 = complex(real_part, -imaginary_part)
        solutions = (root1, root2)

    return solutions

# Example usage:
a = float(input("Enter the coefficient a: "))
b = float(input("Enter the coefficient b: "))
c = float(input("Enter the coefficient c: "))

roots = solve_quadratic(a, b, c)
print("Roots of the quadratic equation:", roots)
